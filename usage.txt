Running Individual Components

After making the directory like above, run:
```
python run.py [#nodes] [max_capacity] -d [dir]
```
to create folders for each node.

Run
```
python node.py [node_id] [paxos_round]
```

multiple times for each node in the system. Do them in succession -
right now the system requires all of them to be live at the same
time (it sleeps for a bit to give enough time for this).

When the specified number of paxos rounds finish, use:

```
python final_graph.py [#nodes] [dir]
```

to print out the final configuration and the number of inter-node
edges.

If you are interested in the prototype simulation we used to test out
the algorithm, go into the prototype directory and use:

```
python partition.py [vertex_file] [edge_file]
```

Currently this saves the original graph (test.png). It then does one
partition cycle (i.e. choose random node, pick random vector, and try to
move it). It saves the new graph (test2.png). 

We also have the script exp.py. This creates random erdos renyi and
preferential attachment graphs and runs repartioning on them. This is
a bit hacky right now - if the files it uses as subprocesses change
their outputs, then it too will be messed up (same goes for run_script).

